plugins {
	id "java"
	id "application"
	id "edu.wpi.first.GradleRIO" version "2020.1.2"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			team = frc.getTeamOrDefault(25)
		}
	}
	artifacts {
		frcJavaArtifact('frcJava') {
			targets << "roborio"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}
		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact('frcStaticFileDeploy') {
			// The directory below is the local directory to deploy
			files = fileTree(dir: 'src/main/deploy')
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = '/home/lvuser/deploy'
		}
	}
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Maven central needed for JUnit
repositories {
	jcenter()
}

dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

	simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

// Fat jar and Manifest
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest {
		attributes(
			"Main-Class": "com.raiderrobotix._2020.Robot"
		)
	}
}

application {
	mainClassName = "com.raiderrobotix._2020.Robot"
}
