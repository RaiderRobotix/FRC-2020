plugins {
	id "idea"
	id "application"
	id "edu.wpi.first.GradleRIO" version "2020.1.2"
	id "org.jetbrains.kotlin.jvm" version "1.3.41"
}


// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO"s backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			team = frc.getTeamNumber()
		}
	}
	artifacts {
		frcJavaArtifact("frcJava") {
			targets << "roborio"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}
		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact("frcStaticFileDeploy") {
			// The directory below is the local directory to deploy
			files = fileTree(dir: "src/main/deploy")
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = "/home/lvuser/deploy"
		}
	}
}


// Maven central needed for JUnit
repositories {
	jcenter()
	maven {
		url "https://devsite.ctr-electronics.com/maven/release/"
	}
	maven {
		url "https://www.revrobotics.com/content/sw/max/sdk/maven/"
	}
	maven { 
		url "https://jitpack.io"
	}
}

dependencies {
	// Kotlin
    implementation platform("org.jetbrains.kotlin:kotlin-bom")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"

	// https://www.kauailabs.com/dist/frc/2019/navx_frc.json
	implementation "com.kauailabs.navx.frc:navx-java:3.1.400"

	implementation "org.ghrobotics:FalconLibrary:2020.1.2"
	implementation "com.github.hybras:CTRE-Phoenix:5.17.3"
	implementation "com.github.hybras:SparkMax:1.5.1"
	implementation "com.github.TeamMeanMachine:meanlib:frc2019-SNAPSHOT"

	implementation "edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:2020.1.1"

	// WPI dependencies
	implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)

    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
	
}

def MAIN_CLASS = "com.raiderrobotix._2020.Robot"

// Fat jar and Manifest
jar {
	manifest {
		attributes "Main-Class" : MAIN_CLASS
	}
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

compileKotlin {
	kotlinOptions {
		jvmTarget = "11"
	}
}

application {
	mainClassName = MAIN_CLASS
}
